%p
  A <code>Miso.Dataset</code> also extends from <code>Miso.DataView</code>. All the methods available on a dataview will also be available on the dataset.

= api("new Miso.Dataset(options)", |
  [{ :name => "options",  :description => "Optional arguments", :params => [ |
  { :name => "url",       :description => "A url to a location containing your data." }, |
  { :name => "sync",      :description => "Set to true to be able to bind to dataset changes. False by default." }, |
  { :name => "jsonp",     :description => "When fetching a url, set to true if call is jsonp request." }, |
  { :name => "delimiter", :description => "If the data is delimited, set to the string that represents the delimiter." }, |
  { :name => "string",    :description => "Set to true if data is in the internal dataset format." }, |
  { :name => "extract",   :description => "Optional passthrough function for the data before it goes into the parser to extract the actual row containing values from a potentially larger set of data." }, |
  { :name => "ready",     :description => "Callback function that will be called once data is fetched. Will be called before success callback on fetch." }, |
  { :name => "columns",   :description => "A way to manually override column type detection. Expects an array of objects of the following structure: <code>{ name : 'columnname', type: 'columntype', ... (additional params required for type here.)}</code> " }, |
  { :name => "comparator",:description => "A function to sort the data by. It will be sorted on fetch and on any successive addition." }, |
  { :name => "deferred",  :description => "A way to provide your own deferred object. It needs to follow the standard deferred signatures." }, |
  { :name => "importer",  :description => "The classname of any importer (passes through auto detection based on parameters. For example: <code>Miso.Importers.Polling</code>." }, |
  { :name => "parser",    :description => "The classname of any parser (passes through auto detection based on parameters. For example: <code>Miso.Parsers.Delimited</code>." }, |
  { :name => "resetOnFetch", :description => "set to true if any subsequent fetches after first one should overwrite the current data." }, |
  { :name => "uniqueAgainst", :description => "Set to a column name to check for duplication on subsequent fetches." }, |
  { :name => "interval",  :description => "Polling interval. Set to any value in milliseconds to enable polling on a url." } |
  ]}], |
  "Dataset Constructor", "Miso.Dataset")

%h3 Miso.Dataset Instance Methods
In this section, <code>ds</code> will be considered an instance of <code>Miso.Dataset</code>.
= api("ds.fetch(options)", |
  [{ :name => "options", :description => "Optional Arguments", :params => [ |
  { :name => "success",  :description => "Success callback to be called when data is fetched. Context is the dataset."}, |
  { :name => "error",    :description => "Error callback to be called when data fetching failed.. Context is the dataset."} |
  ]}], |
  "Fetches the data and populates the dataset. Even when importing local objects from a var, this needs to be called.", "Deferred")
= api("ds.apply(data)", |
  [{ :name => "data",    :description => "Data to be applied (added or replaceing) to the dataset in whatever format the parser expects" }], |
  "Applies the data to the dataset. It can add it blindly, replace all existing or add only unique rows based on a column. This is called in fetch and most likely will never need to be called.")
= api("ds.addColumn(column)", |
  [{ :name => "column",    :description => "Column options", :params => [ |
  { :name => "name", :description => "Column name" }, |
  { :name => "type", :description => "Column type (string name of type)" }, |
  { :name => "format", :description => "Optiona. Only set if time type. The moment.js format describing the input dates." }, |
  { :name => "id", :description => "Optional. Sets a custom column _id. We assign one by default." }, |
  { :name => "data", :description => "Optional. A set of data. By default, set to an empty array." } |
  ]}], |
  "Creates a new column and adds it to the dataset.",
  "Miso.Column")
= api("ds.addColumns(columns)", |
  [{ :name => "columns",    :description => "Array of column objects" }], |
  "Adds all columns. See <code>ds.addColumn(column)</code> for specification of properties.")
= api("ds.add(row, options)", |
  [{ :name => "row",    :description => "Object representing a new row" }, |
  { :name => "options", :description => "Optional Arguments", :params => [ |
  { :name => "silent", :description => "Set to true to disable event firing" }]} |
  ], |
  "Adds a row to the dataset. This will fire <code>add</code> and <code>change</code> events on a syncable dataset.")   
= api("ds.remove(filter, options)", |
  [{ :name => "filter", :description => "Can be one of two things: A row id, or a filter function that takes a row and returns true if that row should be removed or false otherwise." }, |
  { :name => "options", :description => "Optional Arguments", :params => [ |
  { :name => "silent", :description => "Set to true to disable event firing" }]} |
  ], |
  "Removes a row from a dataset. This will fire <code>remove</code> and <code>change</code> events on a syncable dataset.")
= api("ds.update(filter, newProperties, options)", |
  [{ :name => "filter", :description => "Can be one of two things: A row id, or a filter function that takes a row and returns true if that row should be updated or false otherwise." }, |
  { :name => "newProperties", :description => "An object representing the values that are changing."}, |
  { :name => "options", :description => "Optional Arguments", :params => [ |
  { :name => "silent", :description => "Set to true to disable event firing" }]} |
  ], |
  "Updates one or more rows in a dataset. This will fire <code>update</code> and <code>change</code> events on a syncable dataset.")
= api("ds.reset()", [], |
  "Resets the dataset by removing all the data from the coluns. Fires a <code>reset</code> event.") 

