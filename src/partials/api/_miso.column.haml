= api("new Miso.Column(options)", |
  [{ :name => "options",    :description => "Column options", :params => [ |
  { :name => "name", :description => "Column name" }, |
  { :name => "type", :description => "Column type (string name of type)" }, |
  { :name => "format", :description => "Optional. Only set if time type. The moment.js format describing the input dates." }, |
  { :name => "id", :description => "Optional. Sets a custom column _id. We assign one by default." }, |
  { :name => "data", :description => "Optional. A set of data. By default, set to an empty array." } |
  ]}], |
  "Creates a new column. Doesn't attach it to the dataset by default.",
  "Miso.Column");

%h3 Miso.Column Instance Methods
In the following section, we shall assume that <code>col</code> references a column that was retrieved from the dataset.

= api("col.toNumeric(value, index)", |
  [{ :name => "value", :description => "The value to convert to a numeric representation." }, |
  { :name => "index",  :description => "The position of the value wherever it is it came from."} ], |
  "A passthrough method that simply returns the numeric value of any input (in or outside the column) by passing it through the <code>Miso.types.*.numeric</code> methods.", |
  "number");
= api("col.numericAt(index)", |
  [{ :name => "index",  :description => "The position of the value in the data of the column."} ], |
  "A passthrough method that simply returns the numeric value a value in the data of the column by passing it through the <code>Miso.types.*.numeric</code> methods.", |
  "number");  
= api("col.coerce()", [], |
  "Coerces all the data in the column's data array to the appropriate type.");