- @page_title = "The Miso Project :: Dataset :: Tutorials"

%article.dataset
  %section.tutorial
    %h2
      Computed Values
    %p 
      A pretty common requirement is to actually compute some basic statistics about your data. 
      Most of the time those calculations happen on all the values in a specific column or a 
      collection of columns, which is part of why we arrange our data in a column-wise manner. 
      Depending on how your original dataset was set up, you might get two different types of values:
    %p
      %ul
        %li
          If you set <code>sync:true</code> on your original dataset, you will get a <code>Miso.Product</code>
          for any of the following calls. The Miso.Product maintains a binding to the original Dataset and will
          know to recompute itself when changes occur to the underlying data. This does mean that
          you need to retrieve the value directly from this Miso.Product object by calling <code>.val()</code>.
          For example: 
          = toRunnableCodeBlock("dataset/computations/syncing")
        %li
          If you did not set the sync flag, you will just return a value (most likely a number) for any of the
          following calls.
    
    %div.indent-1
      %h3
        Built-in Computations:

      %h3 Max

      = toRunnableCodeBlock("dataset/computations/max")

      %p
        <b>Note</b> that the <code>max</code> can be computed on numeric columns but also time columns!

        = toRunnableCodeBlock("dataset/computations/max_time")

      %h3 Min

      = toRunnableCodeBlock("dataset/computations/min")

      %h3 Sum

      = toRunnableCodeBlock("dataset/computations/sum")

      %p
        <b>Note</b> you can't add up dates, so don't try that one.

      %h3 Mean

      = toRunnableCodeBlock("dataset/computations/mean")

    %h3 Adding your own

    %p
      If you want to add your own computations to your dataset, take a look at <code>src/products.js</code> for some examples (like <code>max</code> and <code>min</code>.) 
    %p
      For example, if we wanted to implement a product that returned a random value from the dataset, you could do it like so:

      = toRunnableCodeBlock("dataset/computations/custom")

      <b>Note</b> that this form will also support an actual subscribable product if your dataset is syncable.
          
    %a{ :href => '/dataset/tutorials/selection', :style => 'float:left;' }
      %h2
        &laquo; Selecting Data

    %a{ :href => '/dataset/tutorials/derived', :style => 'float:right;' }
      %h2
        Derived Datasets &raquo; 
