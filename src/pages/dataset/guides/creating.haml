- @page_title = "The Miso Project :: Dataset :: Guides"

%article.dataset
  %section.guide
    %h2 
      Creating a Dataset
    %p
      To begin working with your dataset, you first need to import your data. You can import either <b>local</b> data (in the form of a variable that happens to contain your data) or <b>remote</b> data (in the form of a url that we'll fetch from.)

    %h3 Local Importing

    %p
      Out of the box Dataset can take local data objects or remote urls and import data in almost any common format.

      %ul
        %li JSON (including jsonp)
        %li CSV
        %li TSV (Any delimiter is acceptable, including tabs) 
    %p
      There is also a growing library of custom data importers such as: 

      %ul
        %li
          Google Spreadsheets

    %h4 Importing from a local object array

    %p
      If you have an array of json objects, you can easily convert them to a Dataset like so:

      = toRunnableCodeBlock("dataset/creation/importingLocalDataArray")

    %h4 Importing from a local "strict" format object
    %p
      If you happen to have your data preprocessed in what we call a "strict" format, you can speed up your import slightly by initializing your Dataset with the <code>strict</code> flag:
      = toRunnableCodeBlock("dataset/creation/importingLocalStrictDataArray")

    %h4 Importing from a local delimited string format
    %p
      If for some reason you actually have all your data as a delimited string on the client side (which is an unlikely but possible,) you can import that into a dataset object too.
      = toRunnableCodeBlock("dataset/creation/importingLocalDelimitedString")

    %p
      <b>Note</b> You can also import remote delimited data by simply providing a <code>url</code> parameter instead of the <code>data</code> one. <br/>
      <b>Note</b> You can specify any delimiter string, not just the comma.

    %h3 Remote Importing
    %p
      Most of the time, your data will live somewhere else and you'll want to fetch it via a url. All the above formats would work except you would need to replace your <code>data</code> property with with a <code>url</code> property like so:
    %p
      %code
        :plain
          var ds = new DS.Dataset({
            url : "http://myserver.com/data/mydata.json"
          });

    %h4 Google Spreadsheet Importing
    %p
      If you have a <b>published</b> Google Spreadsheet that you would like to import data from, you can do so with the following format:

      = toRunnableCodeBlock("dataset/creation/importingGoogleSpreadsheet")

    %p
      The google spreadsheet importer is utilizing the format specified here:
      =link_to 'http://code.google.com/apis/gdata/samples/spreadsheet_sample.html','http://code.google.com/apis/gdata/samples/spreadsheet_sample.html'

    %h3 Remote Polling
    %p
      If you are handling a live data feed, you can initialize your dataset to perform
      ajax-based polling at regular intervals to fetch your data. There are three different ways in which this data can be merged into your existing dataset:
      %ul
        %li
          <b>Appended</b> - All new rows will be appended to the end of the dataset. This is the default behavior.
        %li
          <b>Reset</b> - All the current rows in the dataset will be thrown out and the new rows will be put into the dataset. To enable this, set <code>resetOnFetch</code> to <code>true</code> when initializing your dataset. This will fire a <code>reset</code> event on a syncable dataset.
        %li
          <b>Unique</b> - By specifying a column on which the data is supposed to be unique, new incoming rows will only be added IF the value in that column is unique. To enable this, set <code>uniqueAgainst</code> to the column name you wish to check against. Note, this is an expensive operation!

    = toRunnableCodeBlock("dataset/creation/polling")      
    %h3 Custom Importers
    %p
      You may have noticed how easy it is to set a custom importer and parser in the dataset constructor by specifying the <code>importer</code> and <code>parser</code> properties. The import system can also easily be extended for custom data formats and other APIs. See the "Write Your Own Importers & Parsers" section for more information.


    %a{ :href => '/dataset/guides/quickstart', :style => 'float:left;' }
      %h2
        &laquo; Quickstart 

    %a{ :href => '/dataset/guides/fetching', :style => 'float:right;' }
      %h2
        Fetching Data &raquo;

