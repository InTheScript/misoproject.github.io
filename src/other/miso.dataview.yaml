---
name: 'Miso.Dataview'
inherit: ['Miso.Events']
description: |
  A <code>Miso.DataView</code> is an immutable version of dataset. It is the result of selecting a subset of the data using the <code>ds.where</code> call. If the dataset is syncing, this view will be updated when changes take place in the original dataset.
  A <code>Miso.Dataset</code> also extends from <code>Miso.DataView</code>. All the methods available on a dataview will also be available on the dataset.  
instance_methods:
-
  name: 'columnNames'
  signature: 'ds.columnNames()'
  description: |
    Returns an array containing the names of all columns
    = toRunnableCodeBlock("api/miso.dataview.columnnames")
  returns: 'Array'
-
  name: 'column'
  signature: 'ds.column( name )'
  description: |
    Returns a reference to a column object
    = toRunnableCodeBlock("api/miso.dataview.column")
  returns: 'Array'
  params:
  -
    name: 'name'
    type: 'String'
    required: true,
    description: >
      Name of Column to be returned

-
  name: 'columns'
  signature: 'ds.columns( nameArray )'
  description: |
    Shorthand for ds.where({ columns : nameArray });
    = toRunnableCodeBlock("api/miso.dataview.columns")
  returns: 'Miso.Dataview'
  params: 
  -
    name: nameArray
    type: Array
    required: true
    description: 'Array of column names to select for the view'
-
  name: 'hasColumn'
  signature: 'ds.hasColumn( name )'
  description: |
    Checks for the existance of a column and returns true/false
    = toRunnableCodeBlock("api/miso.dataview.hascolumn")
  returns: 'Boolean'
  params: 
  -
    name: name
    type: String
    required: true
    description: 'Name of column to check for'
-
  name: 'eachColumn'
  signature: 'ds.eachColumn( iterator, context )'
  description: |
    Iterate over all columns. Direct column references, not arrays so modifying
    data may cause internal inconsistencies.
    = toRunnableCodeBlock("api/miso.dataview.eachColumn")
  returns: ''
  params: 
  -
    name: iterator
    type: Function
    required: true
    description: >
      A function with the following signature: <code>function(columnName, columnObject, index)</code>'
  -
    name: context
    type: Object
    description: >
      The context to be bound to the iterator.
-
  name: 'each'
  signature: 'ds.each( iterator, context )'
  description: |
    Iterate over all rows. Each row is not a direct reference to the data
    and thus should not be altered in any way.
    = toRunnableCodeBlock("api/miso.dataview.each")
  returns: ''
  params: 
  -
    name: iterator
    type: Function
    required: true
    description: >
      A function with the following signature: <code>function(row, rowIndex)</code>'
  -
    name: context
    type: Object
    description: >
      The context to be bound to the iterator.
-
  name: 'reverseEach'
  signature: 'ds.reverseEach( iterator, context )'
  description: |
    Iterate over all rows in reverse. Each row is not a direct reference to the data
    and thus should not be altered in any way.
    = toRunnableCodeBlock("api/miso.dataview.reverseEach")
  returns: ''
  params: 
  -
    name: iterator
    type: Function
    required: true
    description: >
      A function with the following signature: <code>function(row, rowIndex)</code>'
  -
    name: context
    type: Object
    description: >
      The context to be bound to the iterator.
-
  name: 'rowByPosition'
  signature: 'ds.rowByPosition( position )'
  description: |
    Fetches a row object at a specified position. Note that the returned row object is NOT a direct reference to the data and thus any changes to it will not alter the original data.
    = toRunnableCodeBlock("api/miso.dataview.rowbyposition")
  returns: 'Object'
  params: 
  -
    name: position
    required: true
    type: Integer
    description: Position of row

-
  name: 'rowById'
  signature: 'ds.rowById( id )'
  description: |
    Fetches a row object with a specific <code>_id</code>. Note that the returned row object is NOT a direct reference to the data and thus any changes to it will not alter the original data.
    = toRunnableCodeBlock("api/miso.dataview.rowbyid")
  returns: 'Object'
  params: 
  -
    name: id
    required: true
    type: Integer
    description: id of row to be returned
-
  name: 'rows'
  signature: 'ds.rows( rowFilter )'
  description: |
    Shorthand for 
    %a{ :href => '#misodataview_i_where' } ds.where({ rows : rowFilter }); 
    If run with no filter will return all rows.
    = toRunnableCodeBlock("api/miso.dataview.rows")
  returns: 'Miso.Dataview'
  params: 
  -
    name: rowFilter
    type: Array || Function
    description: >
      An array of rowIds or a filter function that takes in a row and returns true if that row should return, false otherwise.

-
  name: 'sort'
  signature: 'ds.sort( args )'
  description: |
    Sorts the dataset according to the comparator. A comparator can either be passed 
    in as part of the options object or have been defined on the dataset already, for 
    example as part of the initialization block.
    = toRunnableCodeBlock("api/miso.dataview.sort")
  returns: 'Miso.Dataview'
  params: 
  -
    name: args
    type: Object
    description: >
      Comparator Function OR
      Options object 
    params:
    -
      name: comparator
      type: Function
      description: |
        Function used to sort the dataset, uses the same return structure as a 
        standard 
        %a{ :href => 'http://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort' } javascript sort
    -
      name: silent
      type: Boolean
      description: >
        Default false, set true to supress the firing of a sort event.
-
  name: 'where'
  signature: 'ds.where( filters, options)'
  description:  |
    Where is used to create Dataviews, subsets of data based on a set of filters. 
    Filtration can be applied to both rows & columns and for syncing datasets changes 
    in the parent dataset from which the dataview was created will be reflected in the
    dataview.
    = toRunnableCodeBlock("api/miso.dataview.where")
  returns: Miso.Dataview
  params:
  -
    name: filters
    type: Object
    description: Could be a function that takes in a row or an options object that can contain the following parameters.
    params:
    -
      name: columns
      type: String || Array
      description: A filter for columns. A single or multiple column names.
    -
      name: rows
      type: Array || Function
      description: |
        A filter for rows. A rowId or a filter function that takes in a row and returns 
        true if it passes the criteria.
-
  name: groupBy
  returns: Miso.Derived
  signature: ds.groupBy(byColumn, columns, options)
  description: |
    Groups rows by the values in a given column
    = toRunnableCodeBlock("api/miso.dataview.groupBy")
  params:
  -
    name: byColumn
    type: String
    required: true
    description: Name of the column by which to group
  -
    name: columns
    required: true
    type: Array
    description: A string of a column column or an array of column names to be groups
  -
    name: options
    type: Object
    description: Options object
    params:
    -
      name: method
      type: Function
      description: |
        Function that specifies the way in which the columns are aggregated. The default is sum. 
        The function signature is <code>function(arr)</code>. It should return a single result.
    -
      name: rejectNA
      type: boolean
      description: |
        Set to true to remove nulls, undefined and empty values before computing group by. Set to true
        by default. Set to false to turn this off.
-
  name: countBy
  signature: ds.countBy(byColumn, options)
  returns: Miso.Derived
  description: |
    Returns a new derived dataset that contains the original byColumn and a count column that returns the number of occurances each unique value in the byColumn contained.
    = toRunnableCodeBlock("api/miso.dataview.countBy")
  params:
  -
    name: byColumn
    type: String
    description: The column to count instances again.
    required: true
  -
    name: options
    type: Object
    description: Options object

-
  name: movingAverage
  signature: ds.movingAverage(columns, size, options)
  returns: Miso.Derived
  description: |
    Returns a derived dataset in which the specified columns have a moving average computed over them of a specified size.

  params: 
  -
    name: columns
    type: Array
    description: The columns to compute a moving average over.
  -
    name: size
    description: The size of your moving average window (the number of rows to average per row.)
    type: Integer
  -
    name: options
    type: Object
    description: Options object
    params:
    -
      name: method
      type: Function
      description: The method by which the moving average will be computed. The default is mean.
-
  name: min
  signature: ds.min( column )
  returns: Number || Miso.Product
  description: |
    If the dataset has <code>sync</code> enabled this will return a <code>Miso.Product</code> that can
    be used to bind events to and access the current value. Otherwise it will return the current 
    value - the lowest numeric value in that column
    = toRunnableCodeBlock("api/miso.dataview.min")
  params:
  -
    name: column
    type: String
    required: true
    description: Name of the column on which to find the min
-
  name: max
  signature: ds.max( column )
  returns: Number || Miso.Product
  description: |
    If the dataset has <code>sync</code> enabled this will return a <code>Miso.Product</code> that can
    be used to bind events to and access the current value. Otherwise it will return the current 
    value - the highest numeric value in that column
    = toRunnableCodeBlock("api/miso.dataview.max")
  params:
  -
    name: column
    type: String
    required: true
    description: Name of the column on which to find the max

-
  name: sum
  signature: ds.sum( column )
  returns: Number || Miso.Product
  description: |
    If the dataset has <code>sync</code> enabled this will return a <code>Miso.Product</code> that can
    be used to bind events to and access the current value. Otherwise it will return the current 
    value - the sum of the numeric form of the values in the column.
    = toRunnableCodeBlock("api/miso.dataview.sum")
  params:
  -
    name: column
    type: String
    required: true
    description: Name of the column on which to add up the sum
-
  name: mean
  signature: ds.mean( column )
  returns: Number || Miso.Product
  description: |
    If the dataset has <code>sync</code> enabled this will return a <code>Miso.Product</code> that can
    be used to bind events to and access the current value. Otherwise it will return the current 
    value - the mean or average of the numeric form of the values in the column.
    = toRunnableCodeBlock("api/miso.dataview.mean")
  params:
  -
    name: column
    type: String
    required: true
    description: Name of the column on which to find the mean
